// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "attendance.proto" (package "attendance.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Attendance } from "./attendance";
import type { AttendanceSnapshot } from "./attendance";
import type { AttendanceRequest } from "./attendance";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ScanSummary } from "./attendance";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ScanAck } from "./attendance";
import type { ScanEvent } from "./attendance";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service attendance.v1.Attendance
 */
export interface IAttendanceClient {
    /**
     * Single scan (mobile app / scanner fires once)
     *
     * @generated from protobuf rpc: RecordScan
     */
    recordScan(input: ScanEvent, options?: RpcOptions): UnaryCall<ScanEvent, ScanAck>;
    /**
     * Batch or rapid-fire stream from device
     *
     * @generated from protobuf rpc: Scan
     */
    scan(options?: RpcOptions): ClientStreamingCall<ScanEvent, ScanSummary>;
    /**
     * Watch attendance snapshots (server stream)
     *
     * @generated from protobuf rpc: GetAttendance
     */
    getAttendance(input: AttendanceRequest, options?: RpcOptions): ServerStreamingCall<AttendanceRequest, AttendanceSnapshot>;
}
/**
 * @generated from protobuf service attendance.v1.Attendance
 */
export class AttendanceClient implements IAttendanceClient, ServiceInfo {
    typeName = Attendance.typeName;
    methods = Attendance.methods;
    options = Attendance.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Single scan (mobile app / scanner fires once)
     *
     * @generated from protobuf rpc: RecordScan
     */
    recordScan(input: ScanEvent, options?: RpcOptions): UnaryCall<ScanEvent, ScanAck> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanEvent, ScanAck>("unary", this._transport, method, opt, input);
    }
    /**
     * Batch or rapid-fire stream from device
     *
     * @generated from protobuf rpc: Scan
     */
    scan(options?: RpcOptions): ClientStreamingCall<ScanEvent, ScanSummary> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanEvent, ScanSummary>("clientStreaming", this._transport, method, opt);
    }
    /**
     * Watch attendance snapshots (server stream)
     *
     * @generated from protobuf rpc: GetAttendance
     */
    getAttendance(input: AttendanceRequest, options?: RpcOptions): ServerStreamingCall<AttendanceRequest, AttendanceSnapshot> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttendanceRequest, AttendanceSnapshot>("serverStreaming", this._transport, method, opt, input);
    }
}
