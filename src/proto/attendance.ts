// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "attendance.proto" (package "attendance.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message attendance.v1.ScanEvent
 */
export interface ScanEvent {
    /**
     * @generated from protobuf field: string device_id = 1
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string attendee_id = 2
     */
    attendeeId: string; // e.g., badge id, GUID, email, etc.
    /**
     * @generated from protobuf field: int64 timestamp_unix_ms = 3
     */
    timestampUnixMs: bigint;
    /**
     * @generated from protobuf field: string location = 4
     */
    location: string; // optional: gate/room
    /**
     * @generated from protobuf field: string meta = 5
     */
    meta: string; // optional: barcode raw, etc.
}
/**
 * @generated from protobuf message attendance.v1.ScanAck
 */
export interface ScanAck {
    /**
     * @generated from protobuf field: string scan_id = 1
     */
    scanId: string; // server-generated id
    /**
     * @generated from protobuf field: bool accepted = 2
     */
    accepted: boolean;
    /**
     * @generated from protobuf field: string reason = 3
     */
    reason: string; // if not accepted
}
/**
 * @generated from protobuf message attendance.v1.ScanSummary
 */
export interface ScanSummary {
    /**
     * @generated from protobuf field: int32 total = 1
     */
    total: number;
    /**
     * @generated from protobuf field: int32 accepted = 2
     */
    accepted: number;
    /**
     * @generated from protobuf field: int32 rejected = 3
     */
    rejected: number;
}
/**
 * @generated from protobuf message attendance.v1.AttendanceRequest
 */
export interface AttendanceRequest {
    /**
     * @generated from protobuf field: string location = 1
     */
    location: string; // optional filter
}
/**
 * @generated from protobuf message attendance.v1.AttendanceSnapshot
 */
export interface AttendanceSnapshot {
    /**
     * @generated from protobuf field: string attendee_id = 1
     */
    attendeeId: string;
    /**
     * @generated from protobuf field: string last_seen_location = 2
     */
    lastSeenLocation: string;
    /**
     * @generated from protobuf field: int64 last_seen_unix_ms = 3
     */
    lastSeenUnixMs: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class ScanEvent$Type extends MessageType<ScanEvent> {
    constructor() {
        super("attendance.v1.ScanEvent", [
            { no: 1, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "attendee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timestamp_unix_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "meta", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ScanEvent>): ScanEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviceId = "";
        message.attendeeId = "";
        message.timestampUnixMs = 0n;
        message.location = "";
        message.meta = "";
        if (value !== undefined)
            reflectionMergePartial<ScanEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScanEvent): ScanEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device_id */ 1:
                    message.deviceId = reader.string();
                    break;
                case /* string attendee_id */ 2:
                    message.attendeeId = reader.string();
                    break;
                case /* int64 timestamp_unix_ms */ 3:
                    message.timestampUnixMs = reader.int64().toBigInt();
                    break;
                case /* string location */ 4:
                    message.location = reader.string();
                    break;
                case /* string meta */ 5:
                    message.meta = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScanEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device_id = 1; */
        if (message.deviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceId);
        /* string attendee_id = 2; */
        if (message.attendeeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.attendeeId);
        /* int64 timestamp_unix_ms = 3; */
        if (message.timestampUnixMs !== 0n)
            writer.tag(3, WireType.Varint).int64(message.timestampUnixMs);
        /* string location = 4; */
        if (message.location !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.location);
        /* string meta = 5; */
        if (message.meta !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.meta);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message attendance.v1.ScanEvent
 */
export const ScanEvent = new ScanEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScanAck$Type extends MessageType<ScanAck> {
    constructor() {
        super("attendance.v1.ScanAck", [
            { no: 1, name: "scan_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "accepted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ScanAck>): ScanAck {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.scanId = "";
        message.accepted = false;
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<ScanAck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScanAck): ScanAck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scan_id */ 1:
                    message.scanId = reader.string();
                    break;
                case /* bool accepted */ 2:
                    message.accepted = reader.bool();
                    break;
                case /* string reason */ 3:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScanAck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scan_id = 1; */
        if (message.scanId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.scanId);
        /* bool accepted = 2; */
        if (message.accepted !== false)
            writer.tag(2, WireType.Varint).bool(message.accepted);
        /* string reason = 3; */
        if (message.reason !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message attendance.v1.ScanAck
 */
export const ScanAck = new ScanAck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScanSummary$Type extends MessageType<ScanSummary> {
    constructor() {
        super("attendance.v1.ScanSummary", [
            { no: 1, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "accepted", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "rejected", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScanSummary>): ScanSummary {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.total = 0;
        message.accepted = 0;
        message.rejected = 0;
        if (value !== undefined)
            reflectionMergePartial<ScanSummary>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScanSummary): ScanSummary {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 total */ 1:
                    message.total = reader.int32();
                    break;
                case /* int32 accepted */ 2:
                    message.accepted = reader.int32();
                    break;
                case /* int32 rejected */ 3:
                    message.rejected = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScanSummary, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 total = 1; */
        if (message.total !== 0)
            writer.tag(1, WireType.Varint).int32(message.total);
        /* int32 accepted = 2; */
        if (message.accepted !== 0)
            writer.tag(2, WireType.Varint).int32(message.accepted);
        /* int32 rejected = 3; */
        if (message.rejected !== 0)
            writer.tag(3, WireType.Varint).int32(message.rejected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message attendance.v1.ScanSummary
 */
export const ScanSummary = new ScanSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttendanceRequest$Type extends MessageType<AttendanceRequest> {
    constructor() {
        super("attendance.v1.AttendanceRequest", [
            { no: 1, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AttendanceRequest>): AttendanceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.location = "";
        if (value !== undefined)
            reflectionMergePartial<AttendanceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttendanceRequest): AttendanceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string location */ 1:
                    message.location = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttendanceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string location = 1; */
        if (message.location !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.location);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message attendance.v1.AttendanceRequest
 */
export const AttendanceRequest = new AttendanceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttendanceSnapshot$Type extends MessageType<AttendanceSnapshot> {
    constructor() {
        super("attendance.v1.AttendanceSnapshot", [
            { no: 1, name: "attendee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "last_seen_location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "last_seen_unix_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AttendanceSnapshot>): AttendanceSnapshot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attendeeId = "";
        message.lastSeenLocation = "";
        message.lastSeenUnixMs = 0n;
        if (value !== undefined)
            reflectionMergePartial<AttendanceSnapshot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttendanceSnapshot): AttendanceSnapshot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string attendee_id */ 1:
                    message.attendeeId = reader.string();
                    break;
                case /* string last_seen_location */ 2:
                    message.lastSeenLocation = reader.string();
                    break;
                case /* int64 last_seen_unix_ms */ 3:
                    message.lastSeenUnixMs = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttendanceSnapshot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string attendee_id = 1; */
        if (message.attendeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.attendeeId);
        /* string last_seen_location = 2; */
        if (message.lastSeenLocation !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lastSeenLocation);
        /* int64 last_seen_unix_ms = 3; */
        if (message.lastSeenUnixMs !== 0n)
            writer.tag(3, WireType.Varint).int64(message.lastSeenUnixMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message attendance.v1.AttendanceSnapshot
 */
export const AttendanceSnapshot = new AttendanceSnapshot$Type();
/**
 * @generated ServiceType for protobuf service attendance.v1.Attendance
 */
export const Attendance = new ServiceType("attendance.v1.Attendance", [
    { name: "RecordScan", options: {}, I: ScanEvent, O: ScanAck },
    { name: "Scan", clientStreaming: true, options: {}, I: ScanEvent, O: ScanSummary },
    { name: "GetAttendance", serverStreaming: true, options: {}, I: AttendanceRequest, O: AttendanceSnapshot }
]);
